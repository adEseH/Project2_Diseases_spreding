import numpy as np

class Disease:
    """
    Implementation of the disease
    """
    # Carmen: class structure
    def __init__(self, T = 12.0, S = 100, I = 100, R = 100, alpha = 1, beta = 1, gamma = 1):
        # parameters
        self.T = float(T)  #Months
        self.population_SIS = np.array([S, I])
        self.S = float(S)
        self.I = float(I)
        self.R = float(R)
        self.N_SIS = S + I 
        self.N_SIR = S + I + R

        # parameters
        self.alpha = float(alpha)
        self.beta = float(beta)
        self.gamma = float(gamma)
        self.W = np.empty((3,3))  # Transport probabilities


        # arrays for results
        self.SIS_S_RK_result = np.empty(int(self.T))
        self.SIS_I_RK_result = np.empty(int(self.T))
        self.SIS_R_RK_result = np.empty(int(self.T))

        self.SIS_S_Euler_result = np.empty(int(self.T))
        self.SIS_I_Euler_result = np.empty(int(self.T))
        self.SIS_R_Euler_result = np.empty(int(self.T))

        self.SIR_S_RK_result = np.empty(int(self.T))
        self.SIR_I_RK_result = np.empty(int(self.T))
        self.SIR_R_RK_result = np.empty(int(self.T))

        self.SIR_S_Euler_result = np.empty(int(self.T))
        self.SIR_I_Euler_result = np.empty(int(self.T))
        self.SIR_R_Euler_result = np.empty(int(self.T))

        self.SIR_travel_S_RK_result = np.empty(int(self.T))
        self.SIR_travel_I_RK_result = np.empty(int(self.T))
        self.SIR_travel_R_RK_result = np.empty(int(self.T))

        self.SIR_travel_S_Euler_result = np.empty(int(self.T))
        self.SIR_travel_I_Euler_result = np.empty(int(self.T))
        self.SIR_travel_R_Euler_result = np.empty(int(self.T))

        # vector for S, I R

    def SIS_model(self, population_SIS):
        print(h_step, self.S, self.I, self.N_SIS, self.alpha, self.beta )
        dpdt = np.array([self.beta*population_SIS[0]*population_SIS[1]/self.N_SIS - self.alpha*population_SIS[1], self.beta*population_SIS[0]*self.population_SIS[1]/self.N_SIS  + self.alpha*population_SIS[1]])
        return dpdt

    def SIR_model():
        return

    def SIR_model_travel():
        return
    
    def Runge_Kutta_Stepp(self, population_SIS, h_step = 1, model = SIS_model): #for one time step
        #def RungeKuttaStep( x_old, y_old, delta_x):
        # start time, start values, overall time, step size
        #k1 = model( population)
        #k2 = model( population + k1*h_step/2)
        #k3 = model( population + k2*h_step/2)
        #k4 = model( population + k3*h_step/2)

        #K = 1/6*(k1 + 2.0*k2 + 2.0* k3 + k4)
        print(h_step, self.S, self.I, self.N_SIS, self.alpha, self.beta )

        return  model(self, population_SIS)
    
    def Euler_Step():
        return
    
    def Runge_Kutta_Loop(self, method = Runge_Kutta_Stepp, model = SIS_model): #Maybe we can make one lopp for both algithms
        return
    


#####################  main

# Define Parameters
h_step = 1.0


SIS = Disease(T = 12, S = 100, I = 100, R = 100, alpha = 1, beta = 1, gamma = 1) 

print(SIS.Runge_Kutta_Stepp(h_step, model = Disease.SIS_model))
#x = Disease.Runge_Kutta_Stepp(h_step, model = True)


